{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "High performance API for querying information about Ethereum\nThe API is currently free to use. A fair use policy applies. Calls are rate limited to\n10 requests / 1 minute / IP. All API results are cached for 1 minute.\nIf you required a higher usage plan please checkout https://beaconcha.in/pricing.\nThe API key can be provided in the Header or as a query string parameter.\n\nKey as a query string parameter: `curl https://beaconcha.in/api/v1/slot/1?apikey=<your_key>`\n\nKey in a request header:  `curl -H 'apikey: <your_key>' https://beaconcha.in/api/v1/slot/1`",
    "title": "Beaconcha.in Ethereum API Documentation",
    "contact": {

    },
    "version": "1.1"
  },
  "host": "beaconcha.in",
  "basePath": "/",
  "paths": {
    "/api/healthz": {
      "get": {
        "description": "Health endpoint for monitoring if the explorer is in sync",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "Misc"
        ],
        "summary": "Health of the explorer",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/healthz-loadbalancer": {
      "get": {
        "description": "Health endpoint for montitoring if the explorer-api",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "Misc"
        ],
        "summary": "Health of the explorer-api regarding having a healthy connection to the database",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/chart/{chart}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Misc"
        ],
        "summary": "Returns charts from the page https://beaconcha.in/charts as PNG",
        "parameters": [
          {
            "type": "string",
            "description": "Chart name (see https://github.com/gobitfly/eth2-beaconchain-explorer/blob/master/services/charts_updater.go#L20 for all available names)",
            "name": "chart",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/client/metrics": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Used in eth2 clients to submit stats to your beaconcha.in account. This data can be accessed by the app or the user stats api call.",
        "parameters": [
          {
            "type": "string",
            "description": "User API key, can be found on https://beaconcha.in/user/settings",
            "name": "apikey",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Name your device if you have multiple devices you want to monitor",
            "name": "machine",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/epoch/{epoch}": {
      "get": {
        "description": "Returns information for a specified epoch by the epoch number or an epoch tag (can be latest or finalized)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Epoch"
        ],
        "summary": "Get epoch by number, latest, finalized",
        "parameters": [
          {
            "type": "string",
            "description": "Epoch number, the string latest or the string finalized",
            "name": "epoch",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/types.APIEpochResponse"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Failure",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/epoch/{epoch}/slots": {
      "get": {
        "description": "Returns all slots for a specified epoch",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Epoch"
        ],
        "summary": "Get epoch blocks by epoch number, latest or finalized",
        "parameters": [
          {
            "type": "string",
            "description": "Epoch number, the string latest or string finalized",
            "name": "epoch",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.APISlotResponse"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/eth1deposit/{txhash}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Execution"
        ],
        "summary": "Get an eth1 deposit by its eth1 transaction hash",
        "parameters": [
          {
            "type": "string",
            "description": "Eth1 transaction hash",
            "name": "txhash",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/ethstore/{day}": {
      "get": {
        "description": "ETH.STORE represents the average financial return validators on the Ethereum network have achieved in a 24-hour period.\nFor each 24-hour period the datapoint is denoted by the number of days that have passed since genesis for that period (= beaconchain-day)\nSee https://github.com/gobitfly/eth.store for further information.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ETH.STORE"
        ],
        "summary": "Get ETH.STORE reference rate for a specified beaconchain-day or the latest day",
        "parameters": [
          {
            "type": "string",
            "description": "The beaconchain-day (periods of <(24 * 60 * 60) // SlotsPerEpoch // SecondsPerSlot> epochs) to get the the ETH.STORE for. Must be a number or the string 'latest'.",
            "name": "day",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/execution/address/{address}": {
      "get": {
        "description": "Returns the ether balance and any token balances for a given ethereum address.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Execution"
        ],
        "summary": "Gets information about an ethereum address.",
        "parameters": [
          {
            "type": "string",
            "description": "provide an ethereum address consists of an optional 0x prefix followed by 40 hexadecimal characters",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "filter for a specific token by providing a ethereum token contract address",
            "name": "token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/execution/block/{blockNumber}": {
      "get": {
        "description": "Get execution blocks by execution block number",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Execution"
        ],
        "summary": "Get execution blocks",
        "parameters": [
          {
            "type": "string",
            "description": "Provide one or more execution block numbers. Coma separated up to max 100. ",
            "name": "blockNumber",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/execution/gasnow": {
      "get": {
        "description": "The response is split into four estimated inclusion speeds rapid (15 seconds), fast (1 minute), standard (3 minutes) and slow (> 10 minutes).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Execution"
        ],
        "summary": "Gets the current estimation for gas prices in GWei.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/execution/{addressIndexOrPubkey}/produced": {
      "get": {
        "description": "Get a list of proposed or mined blocks from a given fee recipient address, proposer index or proposer pubkey",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Execution"
        ],
        "summary": "Get proposed or mined blocks",
        "parameters": [
          {
            "type": "string",
            "description": "Either the fee recipient address, the proposer index or proposer pubkey. You can provide multiple by separating them with ','. Max allowed index or pubkeys are 100, max allowed user addresses are 20.",
            "name": "addressIndexOrPubkey",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Limit, amount of entries you wish to receive",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/graffitiwall": {
      "get": {
        "description": "Returns the most recent pixels that have been painted during the last 10000 slots.\nOptionally set the slot query parameter to look back further.\nBoundary coordinates are included.\nReturns an error if an invalid area is provided by the coordinates.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Misc"
        ],
        "summary": "Get the most recent pixels that have been painted.",
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "Start X offset",
            "name": "startx",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Start Y offset",
            "name": "starty",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 999,
            "description": "End X limit",
            "name": "endx",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 999,
            "description": "End Y limit",
            "name": "endy",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Slot to query",
            "name": "slot",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/mobile/notify/register": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Register or update your mobile notification token",
        "parameters": [
          {
            "description": "Your device`s firebase notification token",
            "name": "token",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/rocketpool/stats": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Rocketpool"
        ],
        "summary": "Get global rocketpool network statistics",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/types.APIRocketpoolStatsResponse"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/rocketpool/validator/{indexOrPubkey}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Rocketpool"
        ],
        "summary": "Get rocketpool specific data for given validators",
        "parameters": [
          {
            "type": "string",
            "description": "Up to 100 validator indicesOrPubkeys, comma separated",
            "name": "indexOrPubkey",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/types.ApiRocketpoolValidatorResponse"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/slot/{slotOrHash}": {
      "get": {
        "description": "Returns a slot by its slot number or root hash or the latest slot with string latest",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Slot"
        ],
        "summary": "Get a slot by its slot number or root hash",
        "parameters": [
          {
            "type": "string",
            "description": "Slot or root hash or the string latest",
            "name": "slotOrHash",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/types.APISlotResponse"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/slot/{slot}/attestations": {
      "get": {
        "description": "Returns the attestations included in a specific slot",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Slot"
        ],
        "summary": "Get the attestations included in a specific slot",
        "parameters": [
          {
            "type": "string",
            "description": "Slot",
            "name": "slot",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.APIAttestationResponse"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/slot/{slot}/attesterslashings": {
      "get": {
        "description": "Returns the attester slashings included in a specific slot",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Slot"
        ],
        "summary": "Get the attester slashings included in a specific slot",
        "parameters": [
          {
            "type": "string",
            "description": "Slot",
            "name": "slot",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.APIAttesterSlashingResponse"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/slot/{slot}/deposits": {
      "get": {
        "description": "Returns the deposits included in a specific block",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Slot"
        ],
        "summary": "Get the deposits included in a specific block",
        "parameters": [
          {
            "type": "string",
            "description": "Block slot",
            "name": "slot",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Limit the number of results",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Offset the number of results",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/slot/{slot}/proposerslashings": {
      "get": {
        "description": "Returns the proposer slashings included in a specific slot",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Slot"
        ],
        "summary": "Get the proposer slashings included in a specific slot",
        "parameters": [
          {
            "type": "string",
            "description": "Slot",
            "name": "slot",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.APIProposerSlashingResponse"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/slot/{slot}/voluntaryexits": {
      "get": {
        "description": "Returns the voluntary exits included in a specific slot",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Slot"
        ],
        "summary": "Get the voluntary exits included in a specific slot",
        "parameters": [
          {
            "type": "string",
            "description": "Slot",
            "name": "slot",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.APIVoluntaryExitResponse"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/slot/{slot}/withdrawals": {
      "get": {
        "description": "Returns the withdrawals included in a specific slot",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Slot"
        ],
        "summary": "Get the withdrawals included in a specific slot",
        "parameters": [
          {
            "type": "string",
            "description": "Block slot",
            "name": "slot",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/sync_committee/{period}": {
      "get": {
        "description": "Returns the sync-committee for a sync-period. Validators are sorted by sync-committee-index.\nSync committees where introduced in the Altair hardfork. Peroids before the hardfork do not contain sync-committees.\nFor mainnet sync-committes first started after epoch 74240 (period 290) and each sync-committee is active for 256 epochs.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "SyncCommittee"
        ],
        "summary": "Get the sync-committee for a sync-period",
        "parameters": [
          {
            "type": "string",
            "description": "Period ('latest' for latest period or 'next' for next period in the future)",
            "name": "period",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/types.APISyncCommitteeResponse"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/user/dashboard/save": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "subscribes a user to get notifications from a specific validator via index",
        "parameters": [
          {
            "description": "Index of validator you want to subscribe to",
            "name": "pubKey",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/user/mobile/settings": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Get your device settings, currently only whether to enable mobile notifcations or not",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/types.MobileSettingsData"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Changing your devices mobile settings",
        "parameters": [
          {
            "description": "Whether to enable mobile notifications for this device or not",
            "name": "notify_enabled",
            "in": "body",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/types.MobileSettingsData"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/user/notifications": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Get a set of events a user is subscribed to",
        "parameters": [
          {
            "description": "An object that filters through the active subscriptions",
            "name": "requestFilter",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/types.UsersNotificationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.Subscription"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/user/stats/{offset}/{limit}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Get your client submitted stats",
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "Data offset, default 0",
            "name": "offset",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 180,
            "description": "Data limit, default 180 (~3h).",
            "name": "limit",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.StatsDataStruct"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/user/token": {
      "post": {
        "security": [
          {
            "OAuthAccessCode": [

            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Exchange your oauth code for an access token or refresh your access token",
        "parameters": [
          {
            "type": "string",
            "description": "grant_type use authorization_code for oauth code or refresh_token if you wish to refresh an token",
            "name": "grant_type",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Only required when using authorization_code grant type. Code received via oauth redirect_uri",
            "name": "code",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Only required when using authorization_code grant type. Must match the redirect_uri from your oauth flow.",
            "name": "redirect_uri",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Only required when using refresh_token grant type. The refresh_token you received during authorization_code flow.",
            "name": "refresh_token",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/utils.OAuthResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/utils.OAuthErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/utils.OAuthErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/user/validator/saved": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Get all your tagged validators",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.MinimalTaggedValidators"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/validator/eth1/{eth1address}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Validator"
        ],
        "summary": "Get all validators that belong to an eth1 address",
        "parameters": [
          {
            "type": "string",
            "description": "Eth1 address from which the validator deposits were sent",
            "name": "eth1address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Limit the number of results (default: 2000)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Offset the results (default: 0)",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.ApiValidatorEth1Response"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/validator/leaderboard": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Validator"
        ],
        "summary": "Get the current top 100 performing validators (using the income over the last 7 days)",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.ApiValidatorPerformanceResponse"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/validator/stats/{index}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Validator"
        ],
        "summary": "Get the daily validator stats by the validator index",
        "parameters": [
          {
            "type": "string",
            "description": "Validator index",
            "name": "index",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "End day (default: latest day)",
            "name": "end_day",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start day (default: 0)",
            "name": "start_day",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.ApiValidatorDailyStatsResponse"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/validator/withdrawalCredentials/{withdrawalCredentialsOrEth1address}": {
      "get": {
        "description": "Returns the validator indexes and pubkeys of a withdrawal credential or eth1 address",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Validator"
        ],
        "summary": "Get validator indexes and pubkeys of a withdrawal credential or eth1 address",
        "parameters": [
          {
            "type": "string",
            "description": "Provide a withdrawal credential or an eth1 address with an optional 0x prefix",
            "name": "withdrawalCredentialsOrEth1address",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 10,
            "description": "Limit the number of results, maximum: 200",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset the number of results",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.ApiWithdrawalCredentialsResponse"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/validator/{indexOrPubkey}": {
      "get": {
        "description": "Searching for too many validators based on their pubkeys will lead to an \"URI too long\" error",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Validator"
        ],
        "summary": "Get up to 100 validators",
        "parameters": [
          {
            "type": "string",
            "description": "Up to 100 validator indicesOrPubkeys, comma separated",
            "name": "indexOrPubkey",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.APIValidatorResponse"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Validator"
        ],
        "summary": "Get unlimited validators",
        "parameters": [
          {
            "type": "string",
            "description": "Validator indicesOrPubkeys, comma separated",
            "name": "indexOrPubkey",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.APIValidatorResponse"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/validator/{indexOrPubkey}/attestationeffectiveness": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Validator"
        ],
        "summary": "DEPRECIATED - USE /attestationefficiency (Get the current performance of up to 100 validators)",
        "parameters": [
          {
            "type": "string",
            "description": "Up to 100 validator indicesOrPubkeys, comma separated",
            "name": "indexOrPubkey",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/validator/{indexOrPubkey}/attestationefficiency": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Validator"
        ],
        "summary": "Get the current performance of up to 100 validators",
        "parameters": [
          {
            "type": "string",
            "description": "Up to 100 validator indicesOrPubkeys, comma separated",
            "name": "indexOrPubkey",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/validator/{indexOrPubkey}/attestations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Validator"
        ],
        "summary": "Get all attestations during the last 10 epochs for up to 100 validators",
        "parameters": [
          {
            "type": "string",
            "description": "Up to 100 validator indicesOrPubkeys, comma separated",
            "name": "indexOrPubkey",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/validator/{indexOrPubkey}/balancehistory": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Validator"
        ],
        "summary": "Get the balance history of up to 100 validators",
        "parameters": [
          {
            "type": "string",
            "description": "Up to 100 validator indicesOrPubkeys, comma separated",
            "name": "indexOrPubkey",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "The latest epoch to consider in the query",
            "name": "latest_epoch",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of items to skip",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Maximum number of items to return, up to 100",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.ApiValidatorBalanceHistoryResponse"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/validator/{indexOrPubkey}/blsChange": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Validator"
        ],
        "summary": "Gets the BLS withdrawal address change for up to 100 validators",
        "parameters": [
          {
            "type": "string",
            "description": "Up to 100 validator indicesOrPubkeys, comma separated",
            "name": "indexOrPubkey",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.ApiValidatorBlsChangeResponse"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/validator/{indexOrPubkey}/deposits": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Validator"
        ],
        "summary": "Get all eth1 deposits for up to 100 validators",
        "parameters": [
          {
            "type": "string",
            "description": "Up to 100 validator indicesOrPubkeys, comma separated",
            "name": "indexOrPubkey",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.ApiValidatorDepositsResponse"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/validator/{indexOrPubkey}/execution/performance": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Validator"
        ],
        "summary": "Get the current execution reward performance of up to 100 validators. If block was produced via mev relayer, this endpoint will use the relayer data as block reward instead of the normal block reward.",
        "parameters": [
          {
            "type": "string",
            "description": "Up to 100 validator indicesOrPubkeys, comma separated",
            "name": "indexOrPubkey",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.ApiValidatorExecutionPerformanceResponse"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/validator/{indexOrPubkey}/incomedetailhistory": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Validator"
        ],
        "summary": "Get the income detail history (last 100 epochs) of up to 100 validators",
        "parameters": [
          {
            "type": "string",
            "description": "Up to 100 validator indicesOrPubkeys, comma separated",
            "name": "indexOrPubkey",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.ApiValidatorIncomeHistoryResponse"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/validator/{indexOrPubkey}/performance": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Validator"
        ],
        "summary": "Get the current consensus reward performance of up to 100 validators",
        "parameters": [
          {
            "type": "string",
            "description": "Up to 100 validator indicesOrPubkeys, comma separated",
            "name": "indexOrPubkey",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.ApiValidatorPerformanceResponse"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/validator/{indexOrPubkey}/proposals": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Validator"
        ],
        "summary": "Get all proposed blocks during the last 100 epochs for up to 100 validators. Optionally set the epoch query parameter to look back further.",
        "parameters": [
          {
            "type": "string",
            "description": "Up to 100 validator indicesOrPubkeys, comma separated",
            "name": "indexOrPubkey",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Page the result by epoch",
            "name": "epoch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.ApiValidatorProposalsResponse"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/validator/{indexOrPubkey}/withdrawals": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Validator"
        ],
        "summary": "Get the withdrawal history of up to 100 validators for the last 100 epochs. To receive older withdrawals modify the epoch paraum",
        "parameters": [
          {
            "type": "string",
            "description": "Up to 100 validator indicesOrPubkeys, comma separated",
            "name": "indexOrPubkey",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "the start epoch for the withdrawal history (default: latest epoch)",
            "name": "epoch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/types.ApiValidatorWithdrawalResponse"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    },
    "/api/v1/validators/queue": {
      "get": {
        "description": "Returns the current number of validators entering and exiting the beacon chain",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Validator"
        ],
        "summary": "Get the current validator queue",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/types.ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/types.ApiValidatorQueueResponse"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/types.ApiResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "types.APIAttestationResponse": {
      "type": "object",
      "properties": {
        "aggregationbits": {
          "type": "string"
        },
        "beaconblockroot": {
          "type": "string"
        },
        "block_index": {
          "type": "integer"
        },
        "block_root": {
          "type": "string"
        },
        "block_slot": {
          "type": "integer"
        },
        "committeeindex": {
          "type": "integer"
        },
        "signature": {
          "type": "string"
        },
        "slot": {
          "type": "integer"
        },
        "source_epoch": {
          "type": "integer"
        },
        "source_root": {
          "type": "string"
        },
        "target_epoch": {
          "type": "integer"
        },
        "target_root": {
          "type": "string"
        },
        "validators": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "types.APIAttesterSlashingResponse": {
      "type": "object",
      "properties": {
        "attestation1_beaconblockroot": {
          "type": "string"
        },
        "attestation1_index": {
          "type": "integer"
        },
        "attestation1_indices": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "attestation1_signature": {
          "type": "string"
        },
        "attestation1_slot": {
          "type": "integer"
        },
        "attestation1_source_epoch": {
          "type": "integer"
        },
        "attestation1_source_root": {
          "type": "string"
        },
        "attestation1_target_epoch": {
          "type": "integer"
        },
        "attestation1_target_root": {
          "type": "string"
        },
        "attestation2_beaconblockroot": {
          "type": "string"
        },
        "attestation2_index": {
          "type": "integer"
        },
        "attestation2_indices": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "attestation2_signature": {
          "type": "string"
        },
        "attestation2_slot": {
          "type": "integer"
        },
        "attestation2_source_epoch": {
          "type": "integer"
        },
        "attestation2_source_root": {
          "type": "string"
        },
        "attestation2_target_epoch": {
          "type": "integer"
        },
        "attestation2_target_root": {
          "type": "string"
        },
        "block_index": {
          "type": "integer"
        },
        "block_root": {
          "type": "string"
        },
        "block_slot": {
          "type": "integer"
        }
      }
    },
    "types.APIEpochResponse": {
      "type": "object",
      "properties": {
        "attestationscount": {
          "type": "integer"
        },
        "attesterslashingscount": {
          "type": "integer"
        },
        "averagevalidatorbalance": {
          "type": "integer"
        },
        "blockscount": {
          "type": "integer"
        },
        "depositscount": {
          "type": "integer"
        },
        "eligibleether": {
          "type": "integer"
        },
        "epoch": {
          "type": "integer"
        },
        "finalized": {
          "type": "boolean"
        },
        "globalparticipationrate": {
          "type": "integer"
        },
        "missedblocks": {
          "type": "integer"
        },
        "orphanedblocks": {
          "type": "integer"
        },
        "proposedblocks": {
          "type": "integer"
        },
        "proposerslashingscount": {
          "type": "integer"
        },
        "rewards_exported": {
          "type": "integer"
        },
        "scheduledblocks": {
          "type": "integer"
        },
        "totalvalidatorbalance": {
          "type": "integer"
        },
        "ts": {
          "type": "integer"
        },
        "validatorscount": {
          "type": "integer"
        },
        "voluntaryexitscount": {
          "type": "integer"
        },
        "votedether": {
          "type": "integer"
        },
        "withdrawalcount": {
          "type": "integer"
        }
      }
    },
    "types.APIProposerSlashingResponse": {
      "type": "object",
      "properties": {
        "block_index": {
          "type": "integer"
        },
        "block_root": {
          "type": "string"
        },
        "block_slot": {
          "type": "integer"
        },
        "header1_bodyroot": {
          "type": "string"
        },
        "header1_parentroot": {
          "type": "string"
        },
        "header1_signature": {
          "type": "string"
        },
        "header1_slot": {
          "type": "integer"
        },
        "header1_stateroot": {
          "type": "string"
        },
        "header2_bodyroot": {
          "type": "string"
        },
        "header2_parentroot": {
          "type": "string"
        },
        "header2_signature": {
          "type": "string"
        },
        "header2_slot": {
          "type": "integer"
        },
        "header2_stateroot": {
          "type": "string"
        },
        "proposerindex": {
          "type": "integer"
        }
      }
    },
    "types.APIRocketpoolStatsResponse": {
      "type": "object",
      "properties": {
        "claim_interval_time": {
          "type": "string"
        },
        "claim_interval_time_start": {
          "type": "integer"
        },
        "current_node_demand": {
          "type": "number"
        },
        "current_node_fee": {
          "type": "number"
        },
        "effective_rpl_staked": {
          "type": "number"
        },
        "minipool_count": {
          "type": "integer"
        },
        "node_count": {
          "type": "integer"
        },
        "node_operator_rewards": {
          "type": "number"
        },
        "odao_member_count": {
          "type": "integer"
        },
        "reth_apr": {
          "type": "number"
        },
        "reth_exchange_rate": {
          "type": "number"
        },
        "reth_supply": {
          "type": "number"
        },
        "rpl_price": {
          "type": "integer"
        },
        "total_eth_balance": {
          "type": "number"
        },
        "total_eth_staking": {
          "type": "number"
        }
      }
    },
    "types.APISlotResponse": {
      "type": "object",
      "properties": {
        "attestationscount": {
          "type": "integer"
        },
        "attesterslashingscount": {
          "type": "integer"
        },
        "blockroot": {
          "type": "string"
        },
        "depositscount": {
          "type": "integer"
        },
        "epoch": {
          "type": "integer"
        },
        "eth1data_blockhash": {
          "type": "string"
        },
        "eth1data_depositcount": {
          "type": "integer"
        },
        "eth1data_depositroot": {
          "type": "string"
        },
        "exec_base_fee_per_gas": {
          "type": "integer",
          "x-nullable": true
        },
        "exec_block_hash": {
          "type": "string",
          "x-nullable": true
        },
        "exec_block_number": {
          "type": "integer",
          "x-nullable": true
        },
        "exec_extra_data": {
          "type": "string",
          "x-nullable": true
        },
        "exec_fee_recipient": {
          "type": "string",
          "x-nullable": true
        },
        "exec_gas_limit": {
          "type": "integer",
          "x-nullable": true
        },
        "exec_gas_used": {
          "type": "integer",
          "x-nullable": true
        },
        "exec_logs_bloom": {
          "type": "string",
          "x-nullable": true
        },
        "exec_parent_hash": {
          "type": "string",
          "x-nullable": true
        },
        "exec_random": {
          "type": "string",
          "x-nullable": true
        },
        "exec_receipts_root": {
          "type": "string",
          "x-nullable": true
        },
        "exec_state_root": {
          "type": "string",
          "x-nullable": true
        },
        "exec_timestamp": {
          "type": "integer",
          "x-nullable": true
        },
        "exec_transactions_count": {
          "type": "integer",
          "x-nullable": true
        },
        "graffiti": {
          "type": "string"
        },
        "graffiti_text": {
          "type": "string"
        },
        "parentroot": {
          "type": "string"
        },
        "proposer": {
          "type": "integer"
        },
        "proposerslashingscount": {
          "type": "integer"
        },
        "randaoreveal": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        },
        "slot": {
          "type": "integer"
        },
        "stateroot": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "syncaggregate_bits": {
          "type": "string"
        },
        "syncaggregate_participation": {
          "type": "number"
        },
        "syncaggregate_signature": {
          "type": "string"
        },
        "voluntaryexitscount": {
          "type": "integer"
        },
        "withdrawalcount": {
          "type": "integer"
        }
      }
    },
    "types.APISyncCommitteeResponse": {
      "type": "object",
      "properties": {
        "end_epoch": {
          "type": "integer"
        },
        "period": {
          "type": "integer"
        },
        "start_epoch": {
          "type": "integer"
        },
        "validators": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "types.APIValidatorResponse": {
      "type": "object",
      "properties": {
        "activation_eligibility_epoch": {
          "type": "integer"
        },
        "activation_epoch": {
          "type": "integer"
        },
        "balance": {
          "type": "integer"
        },
        "effective_balance": {
          "type": "integer"
        },
        "exit_epoch": {
          "type": "integer"
        },
        "last_attestation_slot": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "pubkey": {
          "type": "string"
        },
        "slashed": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "validator_index": {
          "type": "integer"
        },
        "withdrawable_epoch": {
          "type": "integer"
        },
        "withdrawal_credentials": {
          "type": "string"
        }
      }
    },
    "types.APIVoluntaryExitResponse": {
      "type": "object",
      "properties": {
        "block_index": {
          "type": "integer"
        },
        "block_root": {
          "type": "string"
        },
        "block_slot": {
          "type": "integer"
        },
        "epoch": {
          "type": "integer"
        },
        "signature": {
          "type": "string"
        },
        "validatorindex": {
          "type": "integer"
        }
      }
    },
    "types.ApiResponse": {
      "type": "object",
      "properties": {
        "data": {

        },
        "status": {
          "type": "string"
        }
      }
    },
    "types.ApiRocketpoolValidatorResponse": {
      "type": "object",
      "properties": {
        "claimed_smoothing_pool": {
          "type": "number"
        },
        "index": {
          "type": "integer"
        },
        "minipool_address": {
          "type": "string"
        },
        "minipool_deposit_type": {
          "type": "string"
        },
        "minipool_node_fee": {
          "type": "number"
        },
        "minipool_status": {
          "type": "string"
        },
        "minipool_status_time": {
          "type": "integer"
        },
        "node_address": {
          "type": "string"
        },
        "node_max_rpl_stake": {
          "type": "number"
        },
        "node_min_rpl_stake": {
          "type": "number"
        },
        "node_rpl_stake": {
          "type": "number"
        },
        "node_timezone_location": {
          "type": "string"
        },
        "penalty_count": {
          "type": "integer"
        },
        "rpl_cumulative_rewards": {
          "type": "number"
        },
        "smoothing_pool_opted_in": {
          "type": "boolean"
        },
        "unclaimed_rpl_rewards": {
          "type": "number"
        },
        "unclaimed_smoothing_pool": {
          "type": "number"
        }
      }
    },
    "types.ApiValidatorBalanceHistoryResponse": {
      "type": "object",
      "properties": {
        "balance": {
          "type": "integer"
        },
        "effectivebalance": {
          "type": "integer"
        },
        "epoch": {
          "type": "integer"
        },
        "validatorindex": {
          "type": "integer"
        },
        "week": {
          "type": "integer"
        },
        "week_end": {
          "type": "string"
        },
        "week_start": {
          "type": "string"
        }
      }
    },
    "types.ApiValidatorBlsChangeResponse": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "blockroot": {
          "type": "string"
        },
        "bls_pubkey": {
          "type": "string"
        },
        "bls_signature": {
          "type": "string"
        },
        "epoch": {
          "type": "integer"
        },
        "slot": {
          "type": "integer"
        },
        "validatorindex": {
          "type": "integer"
        },
        "withdrawalcredentials_0x00": {
          "type": "string"
        },
        "withdrawalcredentials_0x01": {
          "type": "string"
        }
      }
    },
    "types.ApiValidatorDailyStatsResponse": {
      "type": "object",
      "properties": {
        "attester_slashings": {
          "type": "integer"
        },
        "day": {
          "type": "integer"
        },
        "day_end": {
          "type": "string"
        },
        "day_start": {
          "type": "string"
        },
        "deposits": {
          "type": "integer"
        },
        "deposits_amount": {
          "type": "integer"
        },
        "end_balance": {
          "type": "integer"
        },
        "end_effective_balance": {
          "type": "integer"
        },
        "max_balance": {
          "type": "integer"
        },
        "max_effective_balance": {
          "type": "integer"
        },
        "min_balance": {
          "type": "integer"
        },
        "min_effective_balance": {
          "type": "integer"
        },
        "missed_attestations": {
          "type": "integer"
        },
        "missed_blocks": {
          "type": "integer"
        },
        "missed_sync": {
          "type": "integer"
        },
        "orphaned_attestations": {
          "type": "integer"
        },
        "orphaned_blocks": {
          "type": "integer"
        },
        "orphaned_sync": {
          "type": "integer"
        },
        "participated_sync": {
          "type": "integer"
        },
        "proposed_blocks": {
          "type": "integer"
        },
        "proposer_slashings": {
          "type": "integer"
        },
        "start_balance": {
          "type": "integer"
        },
        "start_effective_balance": {
          "type": "integer"
        },
        "validatorindex": {
          "type": "integer"
        },
        "withdrawals": {
          "type": "integer"
        },
        "withdrawals_amount": {
          "type": "integer"
        }
      }
    },
    "types.ApiValidatorDepositsResponse": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "integer"
        },
        "block_number": {
          "type": "integer"
        },
        "block_ts": {
          "type": "integer"
        },
        "from_address": {
          "type": "string"
        },
        "merkletree_index": {
          "type": "string"
        },
        "publickey": {
          "type": "string"
        },
        "removed": {
          "type": "boolean"
        },
        "signature": {
          "type": "string"
        },
        "tx_hash": {
          "type": "string"
        },
        "tx_index": {
          "type": "integer"
        },
        "tx_input": {
          "type": "string"
        },
        "valid_signature": {
          "type": "boolean"
        },
        "withdrawal_credentials": {
          "type": "string"
        }
      }
    },
    "types.ApiValidatorEth1Response": {
      "type": "object",
      "properties": {
        "public_key": {
          "type": "string"
        },
        "valid_signature": {
          "type": "boolean"
        },
        "validator_index": {
          "type": "integer"
        }
      }
    },
    "types.ApiValidatorExecutionPerformanceResponse": {
      "type": "object",
      "properties": {
        "performance1d": {
          "type": "integer"
        },
        "performance31d": {
          "type": "integer"
        },
        "performance7d": {
          "type": "integer"
        },
        "validatorindex": {
          "type": "integer"
        }
      }
    },
    "types.ApiValidatorIncomeHistoryResponse": {
      "type": "object",
      "properties": {
        "epoch": {
          "type": "integer"
        },
        "income": {
          "type": "object",
          "properties": {
            "attestation_head_reward": {
              "type": "integer"
            },
            "attestation_source_reward": {
              "type": "integer"
            },
            "attestation_target_reward": {
              "type": "integer"
            }
          }
        },
        "validatorindex": {
          "type": "integer"
        },
        "week": {
          "type": "integer"
        },
        "week_end": {
          "type": "string"
        },
        "week_start": {
          "type": "string"
        }
      }
    },
    "types.ApiValidatorPerformanceResponse": {
      "type": "object",
      "properties": {
        "balance": {
          "type": "integer"
        },
        "performance1d": {
          "type": "integer"
        },
        "performance31d": {
          "type": "integer"
        },
        "performance365d": {
          "type": "integer"
        },
        "performance7d": {
          "type": "integer"
        },
        "rank7d": {
          "type": "integer"
        },
        "validatorindex": {
          "type": "integer"
        }
      }
    },
    "types.ApiValidatorProposalsResponse": {
      "type": "object",
      "properties": {
        "attestationscount": {
          "type": "integer"
        },
        "attesterslashingscount": {
          "type": "integer"
        },
        "blockroot": {
          "type": "string"
        },
        "depositscount": {
          "type": "integer"
        },
        "epoch": {
          "type": "integer"
        },
        "eth1data_blockhash": {
          "type": "string"
        },
        "eth1data_depositcount": {
          "type": "integer"
        },
        "eth1data_depositroot": {
          "type": "string"
        },
        "exec_base_fee_per_gas": {
          "type": "integer"
        },
        "exec_block_hash": {
          "type": "string"
        },
        "exec_block_number": {
          "type": "integer"
        },
        "exec_extra_data": {
          "type": "string"
        },
        "exec_fee_recipient": {
          "type": "string"
        },
        "exec_gas_limit": {
          "type": "integer"
        },
        "exec_gas_used": {
          "type": "integer"
        },
        "exec_logs_bloom": {
          "type": "string"
        },
        "exec_parent_hash": {
          "type": "string"
        },
        "exec_random": {
          "type": "string"
        },
        "exec_receipts_root": {
          "type": "string"
        },
        "exec_state_root": {
          "type": "string"
        },
        "exec_timestamp": {
          "type": "integer"
        },
        "exec_transactions_count": {
          "type": "integer"
        },
        "graffiti": {
          "type": "string"
        },
        "graffiti_text": {
          "type": "string"
        },
        "parentroot": {
          "type": "string"
        },
        "proposer": {
          "type": "integer"
        },
        "proposerslashingscount": {
          "type": "integer"
        },
        "randaoreveal": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        },
        "slot": {
          "type": "integer"
        },
        "stateroot": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "syncaggregate_bits": {
          "type": "string"
        },
        "syncaggregate_participation": {
          "type": "number"
        },
        "syncaggregate_signature": {
          "type": "string"
        },
        "voluntaryexitscount": {
          "type": "integer"
        }
      }
    },
    "types.ApiValidatorQueueResponse": {
      "type": "object",
      "properties": {
        "beaconchain_entering": {
          "type": "integer"
        },
        "beaconchain_exiting": {
          "type": "integer"
        },
        "validators_count": {
          "type": "integer"
        }
      }
    },
    "types.ApiValidatorWithdrawalResponse": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "type": "integer"
        },
        "blockroot": {
          "type": "string"
        },
        "epoch": {
          "type": "integer"
        },
        "slot": {
          "type": "integer"
        },
        "validatorindex": {
          "type": "integer"
        },
        "withdrawalindex": {
          "type": "integer"
        }
      }
    },
    "types.ApiWithdrawalCredentialsResponse": {
      "type": "object",
      "properties": {
        "publickey": {
          "type": "string"
        },
        "validatorindex": {
          "type": "integer"
        }
      }
    },
    "types.MinimalTaggedValidators": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer"
        },
        "pubKey": {
          "type": "string"
        }
      }
    },
    "types.MobileSettingsData": {
      "type": "object",
      "properties": {
        "notify_token": {
          "type": "string"
        }
      }
    },
    "types.StatsDataStruct": {
      "type": "object",
      "properties": {
        "node": {

        },
        "system": {

        },
        "validator": {

        }
      }
    },
    "types.Subscription": {
      "type": "object",
      "properties": {
        "createdEpoch": {
          "type": "integer"
        },
        "createdTime": {
          "description": "Channels        pq.StringArray `db:\"channels\"`",
          "type": "string"
        },
        "eventFilter": {
          "type": "string"
        },
        "eventName": {
          "type": "string"
        },
        "eventThreshold": {
          "type": "number"
        },
        "id": {
          "type": "integer"
        },
        "lastEpoch": {
          "type": "integer"
        },
        "lastSent": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "unsubscribeHash": {
          "type": "string"
        },
        "userID": {
          "type": "integer"
        }
      }
    },
    "types.UsersNotificationsRequest": {
      "type": "object",
      "properties": {
        "event_filters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "event_names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "join_validator": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "search": {
          "type": "string"
        }
      }
    },
    "utils.OAuthErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "error_description": {
          "type": "string"
        }
      }
    },
    "utils.OAuthResponse": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string"
        },
        "expires_in": {
          "type": "integer"
        },
        "refresh_token": {
          "type": "string"
        },
        "token_type": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "OAuthAccessCode": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://beaconcha.in/user/authorize",
      "tokenUrl": "https://beaconcha.in/user/token"
    }
  },
  "tags": [
    {
      "description": "Consensus layer information about epochs",
      "name": "Epoch",
      "externalDocs": {
        "url": "https://example.com"
      }
    },
    {
      "description": "Consensus layer information about slots",
      "name": "Slot"
    },
    {
      "description": "Consensus layer information about validators",
      "name": "Validator"
    },
    {
      "name": "SyncCommittee"
    },
    {
      "description": "layer information about addresses, blocks and transactions",
      "name": "Execution"
    },
    {
      "description": "is the transparent Ethereum staking reward reference rate.",
      "name": "ETH.STORE",
      "externalDocs": {
        "description": "More info",
        "url": "https://staking.ethermine.org/statistics"
      }
    },
    {
      "description": "validator statistics",
      "name": "Rocketpool",
      "externalDocs": {
        "description": "More info",
        "url": "https://rocketpool.net"
      }
    },
    {
      "name": "Misc"
    },
    {
      "description": "provided for Oauth applications (public OAuth support is a work in progress).",
      "name": "User"
    }
  ]
}
